Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Stamps = Elm.Stamps.make(_elm),
   $Util = Elm.Util.make(_elm);
   var drawModel = function (model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([$Html.fromElement($Graphics$Element.layers(_L.fromArray([$Stamps.drawAll(model.stamp)
                                                                            ,$Graphics$Element.show(model.debug)])))]));
   };
   var model = {_: {}
               ,debug: ""
               ,editing: false
               ,lastPoint: {ctor: "_Tuple2"
                           ,_0: 0
                           ,_1: 0}
               ,stamp: A2($Stamps.makeTriangleStamp,
               50,
               0)};
   var toCollageCoords = F2(function (x,
   y) {
      return {ctor: "_Tuple2"
             ,_0: $Basics.toFloat(x - ($Stamps.width / 2 | 0))
             ,_1: $Basics.toFloat(($Stamps.height / 2 | 0) - y)};
   });
   var addDebug = F2(function (msg,
   model) {
      return _U.replace([["debug"
                         ,A2($Basics._op["++"],
                         model.debug,
                         msg)]],
      model);
   });
   var updateLastPoint = F3(function (x,
   y,
   model) {
      return _U.replace([["lastPoint"
                         ,{ctor: "_Tuple2"
                          ,_0: x
                          ,_1: y}]],
      model);
   });
   var insertShapeInStamp = F2(function (shape,
   stamp) {
      return _U.replace([["shape"
                         ,shape]],
      stamp);
   });
   var replacePointInSide = F2(function (p,
   side) {
      return function () {
         var squareDists = A2($List.map,
         $Util.distSquared(p),
         side);
         var index = A2($Util.getIndexOf,
         function () {
            var _v0 = $List.minimum(squareDists);
            switch (_v0.ctor)
            {case "Just": return _v0._0;}
            _U.badCase($moduleName,
            "on line 58, column 29 to 73");
         }(),
         squareDists);
         return _U.eq(index,
         0) || _U.eq(index,
         $List.length(side) - 1) ? side : A2($Basics._op["++"],
         A2($List.take,index,side),
         A2($Basics._op["++"],
         _L.fromArray([p]),
         A2($List.drop,index + 1,side)));
      }();
   });
   var insertPointInSide = F2(function (p,
   side) {
      return function () {
         var squareDists = A2($List.map,
         $Util.distSquared(p),
         side);
         var squareDistSums = A2($Util.mapBetween,
         F2(function (x,y) {
            return x + y;
         }),
         squareDists);
         var index = 1 + A2($Util.getIndexOf,
         function () {
            var _v2 = $List.minimum(squareDistSums);
            switch (_v2.ctor)
            {case "Just": return _v2._0;}
            _U.badCase($moduleName,
            "on line 50, column 34 to 81");
         }(),
         squareDistSums);
         return A2($Basics._op["++"],
         A2($List.take,index,side),
         A2($Basics._op["++"],
         _L.fromArray([p]),
         A2($List.drop,index,side)));
      }();
   });
   var distPointEdge = F2(function (_v4,
   _v5) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple2":
            switch (_v5._0.ctor)
              {case "_Tuple2":
                 switch (_v5._1.ctor)
                   {case "_Tuple2":
                      return function () {
                           switch (_v4.ctor)
                           {case "_Tuple2":
                              return function () {
                                   var distBetweenEnds = A2($Util.dist,
                                   {ctor: "_Tuple2"
                                   ,_0: _v5._0._0
                                   ,_1: _v5._0._1},
                                   {ctor: "_Tuple2"
                                   ,_0: _v5._1._0
                                   ,_1: _v5._1._1});
                                   var edge = {ctor: "_Tuple2"
                                              ,_0: _v5._1._0 - _v5._0._0
                                              ,_1: _v5._1._1 - _v5._0._1};
                                   var $ = edge,
                                   xEdge = $._0,
                                   yEdge = $._1;
                                   var distFromLine = $Basics.abs(A2($Util.proj,
                                   {ctor: "_Tuple2"
                                   ,_0: 0 - yEdge
                                   ,_1: xEdge},
                                   {ctor: "_Tuple2"
                                   ,_0: _v4._0 - _v5._0._0
                                   ,_1: _v4._1 - _v5._0._1}));
                                   var parallelProj1 = $Basics.abs(A2($Util.proj,
                                   edge,
                                   {ctor: "_Tuple2"
                                   ,_0: _v5._0._0 - _v4._0
                                   ,_1: _v5._0._1 - _v4._1}));
                                   var parallelProj2 = $Basics.abs(A2($Util.proj,
                                   edge,
                                   {ctor: "_Tuple2"
                                   ,_0: _v5._1._0 - _v4._0
                                   ,_1: _v5._1._1 - _v4._1}));
                                   return _U.cmp(parallelProj1,
                                   distBetweenEnds) > 0 ? A2($Util.dist,
                                   {ctor: "_Tuple2"
                                   ,_0: _v5._1._0
                                   ,_1: _v5._1._1},
                                   {ctor: "_Tuple2"
                                   ,_0: _v4._0
                                   ,_1: _v4._1}) : _U.cmp(parallelProj2,
                                   distBetweenEnds) > 0 ? A2($Util.dist,
                                   {ctor: "_Tuple2"
                                   ,_0: _v5._0._0
                                   ,_1: _v5._0._1},
                                   {ctor: "_Tuple2"
                                   ,_0: _v4._0
                                   ,_1: _v4._1}) : distFromLine;
                                }();}
                           _U.badCase($moduleName,
                           "between lines 16 and 29");
                        }();}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 16 and 29");
      }();
   });
   var getClosestSide = F2(function (_v16,
   shape) {
      return function () {
         switch (_v16.ctor)
         {case "_Tuple2":
            return function () {
                 var indexedClosest = F2(function (_v20,
                 _v21) {
                    return function () {
                       switch (_v21.ctor)
                       {case "_Tuple2":
                          return function () {
                               switch (_v20.ctor)
                               {case "_Tuple2":
                                  return function () {
                                       var currDist = A2(distPointEdge,
                                       {ctor: "_Tuple2"
                                       ,_0: _v16._0
                                       ,_1: _v16._1},
                                       {ctor: "_Tuple2"
                                       ,_0: function () {
                                          var _v28 = $List.head(_v20._1);
                                          switch (_v28.ctor)
                                          {case "Just": return _v28._0;}
                                          _U.badCase($moduleName,
                                          "on line 38, column 49 to 83");
                                       }()
                                       ,_1: $Util.end(_v20._1)});
                                       return _U.cmp(currDist,
                                       _v21._1) < 0 ? {ctor: "_Tuple2"
                                                      ,_0: _v20._0
                                                      ,_1: currDist} : {ctor: "_Tuple2"
                                                                       ,_0: _v21._0
                                                                       ,_1: _v21._1};
                                    }();}
                               _U.badCase($moduleName,
                               "between lines 38 and 41");
                            }();}
                       _U.badCase($moduleName,
                       "between lines 38 and 41");
                    }();
                 });
                 var indexedSides = A2($List.indexedMap,
                 F2(function (i,x) {
                    return {ctor: "_Tuple2"
                           ,_0: i
                           ,_1: x};
                 }),
                 shape);
                 return $Basics.fst(A3($List.foldl,
                 indexedClosest,
                 {ctor: "_Tuple2"
                 ,_0: 0
                 ,_1: $Stamps.largeNumber},
                 indexedSides));
              }();}
         _U.badCase($moduleName,
         "between lines 34 and 43");
      }();
   });
   var updateStamp = F3(function (point,
   f,
   stamp) {
      return function () {
         var i = A2(getClosestSide,
         point,
         stamp.shape);
         var $ = A2(stamp.link,i,point),
         i$ = $._0,
         point$ = $._1;
         var shape$ = A3($Util.replaceList,
         i$,
         A2(f,
         point$,
         A2($Util.get,i$,stamp.shape)),
         stamp.shape);
         return A2(insertShapeInStamp,
         A3($Util.replaceList,
         i,
         A2(f,
         point,
         A2($Util.get,i,shape$)),
         shape$),
         stamp);
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Drag":
            return addDebug($Basics.toString(A2($Util.fromRelativeCoords,
              A2($Util.toRelativeCoords,
              {ctor: "_Tuple2",_0: 1,_1: 0},
              {ctor: "_Tuple2"
              ,_0: {ctor: "_Tuple2"
                   ,_0: 0
                   ,_1: 0}
              ,_1: {ctor: "_Tuple2"
                   ,_0: 1
                   ,_1: 1}}),
              {ctor: "_Tuple2"
              ,_0: {ctor: "_Tuple2"
                   ,_0: 2
                   ,_1: 2}
              ,_1: {ctor: "_Tuple2"
                   ,_0: 3
                   ,_1: 3}})))(A2(updateLastPoint,
              action._0,
              action._1)(_U.eq(model.lastPoint,
              {ctor: "_Tuple2"
              ,_0: action._0
              ,_1: action._1}) ? _U.replace([["stamp"
                                             ,A3(updateStamp,
                                             A2(toCollageCoords,
                                             action._0,
                                             action._1),
                                             insertPointInSide,
                                             model.stamp)]],
              model) : _U.replace([["stamp"
                                   ,A3(updateStamp,
                                   A2(toCollageCoords,
                                   action._0,
                                   action._1),
                                   replacePointInSide,
                                   model.stamp)]],
              model)));
            case "MoveMouse":
            return A3(updateLastPoint,
              action._0,
              action._1,
              model);
            case "None": return model;}
         return model;
      }();
   });
   var None = {ctor: "None"};
   var MoveMouse = F2(function (a,
   b) {
      return {ctor: "MoveMouse"
             ,_0: a
             ,_1: b};
   });
   var Drag = F2(function (a,b) {
      return {ctor: "Drag"
             ,_0: a
             ,_1: b};
   });
   var mouseSignal = A3($Signal.map2,
   F2(function (isDown,_v35) {
      return function () {
         switch (_v35.ctor)
         {case "_Tuple2":
            return isDown ? A2(Drag,
              _v35._0,
              _v35._1) : A2(MoveMouse,
              _v35._0,
              _v35._1);}
         _U.badCase($moduleName,
         "on line 129, column 45 to 87");
      }();
   }),
   $Mouse.isDown,
   $Mouse.position);
   var main = $Signal.map(drawModel)(A3($Signal.foldp,
   update,
   model,
   mouseSignal));
   _elm.Main.values = {_op: _op
                      ,Drag: Drag
                      ,MoveMouse: MoveMouse
                      ,None: None
                      ,distPointEdge: distPointEdge
                      ,getClosestSide: getClosestSide
                      ,insertPointInSide: insertPointInSide
                      ,replacePointInSide: replacePointInSide
                      ,insertShapeInStamp: insertShapeInStamp
                      ,updateStamp: updateStamp
                      ,updateLastPoint: updateLastPoint
                      ,update: update
                      ,addDebug: addDebug
                      ,toCollageCoords: toCollageCoords
                      ,model: model
                      ,drawModel: drawModel
                      ,mouseSignal: mouseSignal
                      ,main: main};
   return _elm.Main.values;
};