Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Stamps = Elm.Stamps.make(_elm),
   $Util = Elm.Util.make(_elm);
   var drawTesselation = function (model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([$Html.fromElement($Graphics$Element.layers(_L.fromArray([$Stamps.drawAll(model.stamp)
                                                                            ,$Graphics$Element.show(model.debug)])))]));
   };
   var model = {_: {}
               ,debug: ""
               ,editing: false
               ,pattern: -1
               ,shape: ""
               ,stamp: $Stamps.emptyStamp};
   var replaceStamp = F2(function (stamp,
   model) {
      return _U.replace([["stamp"
                         ,stamp]],
      model);
   });
   var addDebug = F2(function (msg,
   model) {
      return _U.replace([["debug"
                         ,msg]],
      model);
   });
   var stampDict = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                ,_0: "Triangle"
                                                ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                                   ,_0: "only triangle pattern (p2gg)"
                                                                   ,_1: A2($Stamps.makeTriangleStamp,
                                                                   100,
                                                                   0)}])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "Square"
                                                ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                                   ,_0: "parallel sides linked (p1)"
                                                                   ,_1: A2($Stamps.makeSquareStamp,
                                                                   70,
                                                                   0)}
                                                                  ,{ctor: "_Tuple2"
                                                                   ,_0: "adjacent sides linked (p4)"
                                                                   ,_1: A2($Stamps.makeSquare2Stamp,
                                                                   70,
                                                                   0)}
                                                                  ,{ctor: "_Tuple2"
                                                                   ,_0: "opposite sides fliped (p2gg)"
                                                                   ,_1: A2($Stamps.makeSquare3Stamp,
                                                                   70,
                                                                   0)}
                                                                  ,{ctor: "_Tuple2"
                                                                   ,_0: "adjacent sides flipped (p1)"
                                                                   ,_1: A2($Stamps.makeSquare4Stamp,
                                                                   70,
                                                                   0)}
                                                                  ,{ctor: "_Tuple2"
                                                                   ,_0: "opposite flipped 1 pair (p2gg)"
                                                                   ,_1: A2($Stamps.makeSquare5Stamp,
                                                                   70,
                                                                   0)}])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "Hexagon"
                                                ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                                   ,_0: "parallel sides linked (p1)"
                                                                   ,_1: A2($Stamps.makeHexStamp,
                                                                   50,
                                                                   0)}
                                                                  ,{ctor: "_Tuple2"
                                                                   ,_0: "adjacent sides linked (p3)"
                                                                   ,_1: A2($Stamps.makeHex2Stamp,
                                                                   50,
                                                                   0)}])}]));
   var getClosestPoint = F2(function (p,
   sides) {
      return function () {
         var _v0 = $Util.minimumBy(function ($) {
            return $Util.distSquared(p)($Basics.fst($));
         })($List.concat(A2($List.indexedMap,
         F2(function (i,side) {
            return A2($List.map,
            function (p$) {
               return {ctor: "_Tuple2"
                      ,_0: p$
                      ,_1: i};
            },
            $Util.middleList(side));
         }),
         sides)));
         switch (_v0.ctor)
         {case "Just":
            switch (_v0._0.ctor)
              {case "_Tuple2":
                 return $Maybe.Just({ctor: "_Tuple2"
                                    ,_0: A2($Util.getIndexOf,
                                    _v0._0._0,
                                    A2($Util.get,_v0._0._1,sides))
                                    ,_1: _v0._0._1});}
              break;
            case "Nothing":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 44 and 49");
      }();
   });
   var replacePointInStamp = F2(function (p,
   stamp) {
      return function () {
         var _v4 = A2(getClosestPoint,
         p,
         stamp.shape);
         switch (_v4.ctor)
         {case "Just":
            switch (_v4._0.ctor)
              {case "_Tuple2":
                 return function () {
                      var replacePointInSide = F4(function (si,
                      pi,
                      point,
                      shape) {
                         return A3($Util.replaceList,
                         si,
                         A2($Util.replaceList,
                         pi,
                         point)(A2($Util.get,si,shape)),
                         shape);
                      });
                      var $ = A2(stamp.link,
                      _v4._0._1,
                      p),
                      sideIndex$ = $._0,
                      p$ = $._1;
                      var side$ = A2($Util.get,
                      sideIndex$,
                      stamp.shape);
                      var pointIndex$ = function () {
                         var _v8 = A2(getClosestPoint,
                         p$,
                         _L.fromArray([side$]));
                         switch (_v8.ctor)
                         {case "Just":
                            switch (_v8._0.ctor)
                              {case "_Tuple2":
                                 return _v8._0._0;}
                              break;}
                         _U.badCase($moduleName,
                         "between lines 59 and 60");
                      }();
                      var side = A2($Util.get,
                      _v4._0._1,
                      stamp.shape);
                      return _U.replace([["shape"
                                         ,A3(replacePointInSide,
                                         sideIndex$,
                                         pointIndex$,
                                         p$)(A3(replacePointInSide,
                                         _v4._0._1,
                                         _v4._0._0,
                                         p)(stamp.shape))]],
                      stamp);
                   }();}
              break;
            case "Nothing": return stamp;}
         _U.badCase($moduleName,
         "between lines 53 and 66");
      }();
   });
   var getClosestSide = F2(function (_v12,
   shape) {
      return function () {
         switch (_v12.ctor)
         {case "_Tuple2":
            return function () {
                 var indexedClosest = F2(function (_v16,
                 _v17) {
                    return function () {
                       switch (_v17.ctor)
                       {case "_Tuple2":
                          return function () {
                               switch (_v16.ctor)
                               {case "_Tuple2":
                                  return function () {
                                       var currDist = A2($Util.distPointEdge,
                                       {ctor: "_Tuple2"
                                       ,_0: _v12._0
                                       ,_1: _v12._1},
                                       _v16._1);
                                       return _U.cmp(currDist,
                                       _v17._1) < 0 ? {ctor: "_Tuple2"
                                                      ,_0: _v16._0
                                                      ,_1: currDist} : {ctor: "_Tuple2"
                                                                       ,_0: _v17._0
                                                                       ,_1: _v17._1};
                                    }();}
                               _U.badCase($moduleName,
                               "between lines 35 and 38");
                            }();}
                       _U.badCase($moduleName,
                       "between lines 35 and 38");
                    }();
                 });
                 var indexedEdges = $List.concat(A2($List.indexedMap,
                 F2(function (i,side) {
                    return A2($Util.mapBetween,
                    F2(function (x,y) {
                       return {ctor: "_Tuple2"
                              ,_0: i
                              ,_1: {ctor: "_Tuple2"
                                   ,_0: x
                                   ,_1: y}};
                    }),
                    side);
                 }),
                 shape));
                 return $Basics.fst(A3($List.foldl,
                 indexedClosest,
                 {ctor: "_Tuple2"
                 ,_0: 0
                 ,_1: $Util.largeNumber},
                 indexedEdges));
              }();}
         _U.badCase($moduleName,
         "between lines 30 and 40");
      }();
   });
   var insertPointInStamp = F2(function (point,
   stamp) {
      return function () {
         var i = A2(getClosestSide,
         point,
         stamp.shape);
         var $ = A2(stamp.link,i,point),
         i$ = $._0,
         point$ = $._1;
         var insertPointInSide = F2(function (p,
         side) {
            return function () {
               var calcIndex = function (x) {
                  return $Basics.snd(x) + 1;
               };
               var edges = A2($Util.mapBetween,
               F2(function (p1,p2) {
                  return {ctor: "_Tuple2"
                         ,_0: p1
                         ,_1: p2};
               }),
               side);
               var distToEdges = A2($List.indexedMap,
               F2(function (i,edge) {
                  return {ctor: "_Tuple2"
                         ,_0: A2($Util.distPointEdge,
                         p,
                         edge)
                         ,_1: i};
               }),
               edges);
               var mins = $List.take(2)(A2($List.sortBy,
               $Basics.fst,
               distToEdges));
               var tiebreaker = F2(function (i1,
               i2) {
                  return function () {
                     var $ = A2($Util.get,
                     i2,
                     edges),
                     s2 = $._0,
                     e2 = $._1;
                     var distSquared2 = A2($Util.distSquared,
                     s2,
                     p) + A2($Util.distSquared,e2,p);
                     var $ = A2($Util.get,i1,edges),
                     s1 = $._0,
                     e1 = $._1;
                     var distSquared1 = A2($Util.distSquared,
                     s1,
                     p) + A2($Util.distSquared,e1,p);
                     return _U.cmp(distSquared1,
                     distSquared2) < 0 ? i1 + 1 : i2 + 1;
                  }();
               });
               var index = function () {
                  switch (mins.ctor)
                  {case "::":
                     switch (mins._1.ctor)
                       {case "::":
                          switch (mins._1._1.ctor)
                            {case "[]":
                               return A2($Util.fuzzyEquals,
                                 $Basics.fst(mins._0),
                                 $Basics.fst(mins._1._0)) ? A2(tiebreaker,
                                 $Basics.snd(mins._0),
                                 $Basics.snd(mins._1._0)) : calcIndex(mins._0);}
                            break;
                          case "[]":
                          return calcIndex(mins._0);}
                       break;}
                  _U.badCase($moduleName,
                  "between lines 86 and 91");
               }();
               return A3($Util.insertList,
               index,
               p,
               side);
            }();
         });
         var shape$ = A3($Util.replaceList,
         i$,
         A2(insertPointInSide,
         point$,
         A2($Util.get,i$,stamp.shape)),
         stamp.shape);
         return _U.replace([["shape"
                            ,A3($Util.replaceList,
                            i,
                            A2(insertPointInSide,
                            point,
                            A2($Util.get,i,shape$)),
                            shape$)]],
         stamp);
      }();
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Drag":
            return _U.replace([["stamp"
                               ,A2(replacePointInStamp,
                               A2($Util.toCollageCoords,
                               action._0,
                               action._1),
                               model.stamp)]],
              model);
            case "NewPoint":
            return _U.replace([["stamp"
                               ,A2(insertPointInStamp,
                               A2($Util.toCollageCoords,
                               action._0,
                               action._1),
                               model.stamp)]],
              model);
            case "None": return model;
            case "SelectPattern":
            return _U.replace([["pattern"
                               ,action._0]
                              ,["stamp"
                               ,$Basics.snd($Util.get(action._0)(function () {
                                  var _v36 = A2($Dict.get,
                                  model.shape,
                                  stampDict);
                                  switch (_v36.ctor)
                                  {case "Just": return _v36._0;}
                                  _U.badCase($moduleName,
                                  "on line 109, column 84 to 134");
                               }()))]],
              model);
            case "SelectShape":
            return _U.replace([["shape"
                               ,action._0]
                              ,["pattern",-1]],
              model);}
         return model;
      }();
   });
   var Model = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,debug: e
             ,editing: b
             ,pattern: d
             ,shape: c
             ,stamp: a};
   });
   var None = {ctor: "None"};
   var shapeSelectMailbox = $Signal.mailbox(None);
   var patternSelectMailbox = $Signal.mailbox(None);
   var SelectPattern = function (a) {
      return {ctor: "SelectPattern"
             ,_0: a};
   };
   var SelectShape = function (a) {
      return {ctor: "SelectShape"
             ,_0: a};
   };
   var drawSelectors = F3(function (shapeAddress,
   patternAddress,
   model) {
      return function () {
         var formatSelectedDescription = F3(function (option,
         selected,
         desc) {
            return _U.eq(option,
            selected) ? A2($Html.b,
            _L.fromArray([]),
            _L.fromArray([$Html.text(desc)])) : $Html.text(desc);
         });
         var formatSelected = F2(function (option,
         selected) {
            return A3(formatSelectedDescription,
            option,
            selected,
            option);
         });
         return A2($Html.div,
         _L.fromArray([]),
         _L.fromArray([$Html.text("select shape, then select tesselation pattern. the base shape is black and in the center. to edit: ctrl-click to add new point, drag to edit existing point. if you ctrl-drag, you\'ll be creating lots and lots of points! in parens are the associated wallpaper groups the generated pattern will produce.")
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.id("shape-select")]),
                      _L.fromArray([A2($Html.button,
                                   _L.fromArray([A2($Html$Events.onClick,
                                   shapeAddress,
                                   SelectShape("Triangle"))]),
                                   _L.fromArray([A2(formatSelected,
                                   "Triangle",
                                   model.shape)]))
                                   ,A2($Html.button,
                                   _L.fromArray([A2($Html$Events.onClick,
                                   shapeAddress,
                                   SelectShape("Square"))]),
                                   _L.fromArray([A2(formatSelected,
                                   "Square",
                                   model.shape)]))
                                   ,A2($Html.button,
                                   _L.fromArray([A2($Html$Events.onClick,
                                   shapeAddress,
                                   SelectShape("Hexagon"))]),
                                   _L.fromArray([A2(formatSelected,
                                   "Hexagon",
                                   model.shape)]))]))
                      ,!_U.eq(model.shape,
                      "") ? $Html.div(_L.fromArray([]))(A2($List.indexedMap,
                      F2(function (i,_v38) {
                         return function () {
                            switch (_v38.ctor)
                            {case "_Tuple2":
                               return A2($Html.button,
                                 _L.fromArray([A2($Html$Events.onClick,
                                 patternAddress,
                                 SelectPattern(i))]),
                                 _L.fromArray([A3(formatSelectedDescription,
                                 $Basics.toString(i),
                                 $Basics.toString(model.pattern),
                                 _v38._0)]));}
                            _U.badCase($moduleName,
                            "between lines 167 and 169");
                         }();
                      }),
                      function () {
                         var _v42 = A2($Dict.get,
                         model.shape,
                         stampDict);
                         switch (_v42.ctor)
                         {case "Just": return _v42._0;}
                         _U.badCase($moduleName,
                         "on line 171, column 34 to 84");
                      }())) : A2($Html.div,
                      _L.fromArray([]),
                      _L.fromArray([]))]));
      }();
   });
   var drawPage = F3(function (shapeAddress,
   patternAddress,
   model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([drawTesselation(model)
                   ,A3(drawSelectors,
                   shapeAddress,
                   patternAddress,
                   model)]));
   });
   var Drag = F2(function (a,b) {
      return {ctor: "Drag"
             ,_0: a
             ,_1: b};
   });
   var NewPoint = F2(function (a,
   b) {
      return {ctor: "NewPoint"
             ,_0: a
             ,_1: b};
   });
   var drawSignal = A4($Signal.map3,
   F3(function (mouseDown,
   _v44,
   ctrl) {
      return function () {
         switch (_v44.ctor)
         {case "_Tuple2":
            return mouseDown && A2($Util.inCanvas,
              _v44._0,
              _v44._1) ? ctrl ? A2(NewPoint,
              _v44._0,
              _v44._1) : A2(Drag,
              _v44._0,
              _v44._1) : None;}
         _U.badCase($moduleName,
         "between lines 186 and 188");
      }();
   }),
   $Mouse.isDown,
   $Mouse.position,
   $Keyboard.ctrl);
   var main = $Signal.map(A2(drawPage,
   shapeSelectMailbox.address,
   patternSelectMailbox.address))(A2($Signal.foldp,
   update,
   model)($Signal.mergeMany(_L.fromArray([drawSignal
                                         ,shapeSelectMailbox.signal
                                         ,patternSelectMailbox.signal]))));
   _elm.Main.values = {_op: _op
                      ,NewPoint: NewPoint
                      ,Drag: Drag
                      ,SelectShape: SelectShape
                      ,SelectPattern: SelectPattern
                      ,None: None
                      ,Model: Model
                      ,getClosestSide: getClosestSide
                      ,getClosestPoint: getClosestPoint
                      ,replacePointInStamp: replacePointInStamp
                      ,insertPointInStamp: insertPointInStamp
                      ,update: update
                      ,stampDict: stampDict
                      ,addDebug: addDebug
                      ,replaceStamp: replaceStamp
                      ,model: model
                      ,drawTesselation: drawTesselation
                      ,drawSelectors: drawSelectors
                      ,drawPage: drawPage
                      ,shapeSelectMailbox: shapeSelectMailbox
                      ,patternSelectMailbox: patternSelectMailbox
                      ,drawSignal: drawSignal
                      ,main: main};
   return _elm.Main.values;
};